#include <stdio.h>

#include <stdlib.h>

 

// Função para alocar dinamicamente uma matriz

int** alocarMatriz(int linhas, int colunas) {

    int** matriz = (int**)malloc(linhas * sizeof(int*));

    for(int i = 0; i < linhas; i++) {

        matriz[i] = (int*)malloc(colunas * sizeof(int));

    }

    return matriz;

}

 

// Função para liberar a memória alocada para uma matriz

void liberarMatriz(int** matriz, int linhas) {

    for(int i = 0; i < linhas; i++) {

        free(matriz[i]);

    }

    free(matriz);

}

 

// Função para multiplicar duas matrizes

int** multiplicarMatrizes(int** A, int linhasA, int colunasA, int** B, int linhasB, int colunasB) {

    if(colunasA != linhasB) {

        printf("Erro: as matrizes não podem ser multiplicadas.\n");

        return NULL;

    }

 

    int** resultado = alocarMatriz(linhasA, colunasB);

 

    for(int i = 0; i < linhasA; i++) {

        for(int j = 0; j < colunasB; j++) {

            resultado[i][j] = 0;

            for(int k = 0; k < colunasA; k++) {

                resultado[i][j] += A[i][k] * B[k][j];

            }

        }

    }

 

    return resultado;

}

 

// Função para transpor uma matriz

int** transporMatriz(int** matriz, int linhas, int colunas) {

    int** transposta = alocarMatriz(colunas, linhas);

 

    for(int i = 0; i < linhas; i++) {

        for(int j = 0; j < colunas; j++) {

            transposta[j][i] = matriz[i][j];

        }

    }

 

    return transposta;

}

 

// Função para exibir uma matriz

void exibirMatriz(int** matriz, int linhas, int colunas) {

    for(int i = 0; i < linhas; i++) {

        for(int j = 0; j < colunas; j++) {

            printf("%d ", matriz[i][j]);

        }

        printf("\n");

    }

}

 

int main() {

    int linhasA, colunasA, linhasB, colunasB;

 

    // Leitura da matriz A

   printf("Digite o número de linhas da matriz A: ");

    scanf("%d", &linhasA);

    printf("Digite o número de colunas da matriz A: ");

    scanf("%d", &colunasA);

 

    int** A = alocarMatriz(linhasA, colunasA);

    printf("Digite os elementos da matriz A:\n");

    for(int i = 0; i < linhasA; i++) {

        for(int j = 0; j < colunasA; j++) {

            scanf("%d", &A[i][j]);

        }

    }

 

    // Leitura da matriz B

    printf("Digite o número de linhas da matriz B: ");

    scanf("%d", &linhasB);

    printf("Digite o número de colunas da matriz B: ");

    scanf("%d", &colunasB);

 

    int** B = alocarMatriz(linhasB, colunasB);

    printf("Digite os elementos da matriz B:\n");

    for(int i = 0; i < linhasB; i++) {

        for(int j = 0; j < colunasB; j++) {

            scanf("%d", &B[i][j]);

        }

    }

 

    // Multiplicação das matrizes A e B

    int** C = multiplicarMatrizes(A, linhasA, colunasA, B, linhasB, colunasB);

    if(C != NULL) {

        printf("Resultado da multiplicação das matrizes A e B:\n");

        exibirMatriz(C, linhasA, colunasB);

        liberarMatriz(C, linhasA);

    }

 

    // Transposição da matriz A

    int** At = transporMatriz(A, linhasA, colunasA);

    printf("Transposição da matriz A:\n");

    exibirMatriz(At, colunasA, linhasA);

 

    // Liberação de memória

    liberarMatriz(A, linhasA);

    liberarMatriz(B, linhasB);

    liberarMatriz(At, colunasA);

 

    return 0;

}
